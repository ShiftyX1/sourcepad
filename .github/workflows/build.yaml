name: Build and Release

on:
  push:
    branches: [ master, main ]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'electron/**'
      - 'vite.config.ts'
      - 'eslint.config.js'
      - 'tsconfig.json'
      - 'tsconfig.node.json'
      - 'vite.preload.config.ts'
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
    paths:
      - 'src/**'
      - 'assets/**' 
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'electron/**'
      - 'vite.config.ts'
      - 'eslint.config.js'
      - 'tsconfig.json'
      - 'tsconfig.node.json'
      - 'vite.preload.config.ts'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app-changed: ${{ steps.filter.outputs.app }}
      docs-only: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'src/**'
              - 'assets/**'
              - 'scripts/**'
              - 'package.json'
              - 'package-lock.json'
              - 'electron/**'
              - 'vite.config.ts'
              - 'eslint.config.js'
              - 'tsconfig.json'
              - 'tsconfig.node.json'
              - 'vite.preload.config.ts'
            docs:
              - 'docs/**'
              - '*.md'
              - '.github/templates/**'

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.app-changed == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Legacy task
    # - name: Setup Monaco Editor
    #   run: npm run setup

    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # TODO: подпись для macOS
        # CSC_LINK: ${{ secrets.CSC_LINK }}
        # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        # APPLEID: ${{ secrets.APPLEID }}
        # APPLEIDPASS: ${{ secrets.APPLEIDPASS }}

    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist-electron/*.AppImage
          dist-electron/*.deb
          dist-electron/*.rpm

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist-electron/*.exe
          dist-electron/*.msi

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist-electron/*.dmg
          dist-electron/*.zip

  release:
    if: |
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      needs.detect-changes.outputs.app-changed == 'true'
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Prepare release
      id: release
      run: |
        if [[ ${{ github.ref }} == refs/tags/v* ]]; then
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=SourcePad ${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "IS_TAG=true" >> $GITHUB_OUTPUT
          cp .github/templates/release.md release_body.md
        else
          echo "TAG_NAME=nightly-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=SourcePad Nightly Build" >> $GITHUB_OUTPUT
          echo "IS_TAG=false" >> $GITHUB_OUTPUT
          cp .github/templates/nightly.md release_body.md
          sed -i "s/Auto-generated from latest master/$(date +'%Y-%m-%d %H:%M:%S UTC')/g" release_body.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release.outputs.TAG_NAME }}
        name: ${{ steps.release.outputs.RELEASE_NAME }}
        body_path: release_body.md
        draft: ${{ steps.release.outputs.IS_TAG == 'false' }}
        prerelease: ${{ steps.release.outputs.IS_TAG == 'false' }}
        files: |
          artifacts/linux-builds/*
          artifacts/windows-builds/*
          artifacts/macos-builds/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Быстрая проверка только сборки для PR
  test-build:
    if: |
      github.event_name == 'pull_request' &&
      needs.detect-changes.outputs.app-changed == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Monaco Editor
      run: npm run setup

    - name: Test build (pack only)
      run: npm run pack

    - name: Upload test build
      uses: actions/upload-artifact@v4
      with:
        name: test-build
        path: dist/
        retention-days: 7